import { Managers } from "../lib/libaries";

export default class {
  interval = 30;
  constructor() {
    if (Managers.Config.isDev) return;
    this.interval = this.interval * 1000;

    setInterval(async () => {
      let stats: {
        OFFENSES: number;
        NEW_GUILDS: number;
        NEW_USERS: number;
        SITES: number;
        TOTAL_GUILDS: number;
        TOTAL_CUR_GUILDS: number;
        ERRORS: number;
        MESSAGES: number;
      } = {
        OFFENSES: 0,
        NEW_GUILDS: 0,
        NEW_USERS: 0,
        SITES: 0,
        TOTAL_GUILDS: 0,
        TOTAL_CUR_GUILDS: 0,
        ERRORS: 0,
        MESSAGES: 0,
      };
      let keys = Object.keys(stats);
      for (let i = 0; i < keys.length; i++) {
        let key: any = keys[i];
        // @ts-ignore
        stats[key] = await this.getStat(key);
      }
      Managers.SQL.saveStatEntry(
        stats.OFFENSES,
        stats.NEW_GUILDS,
        stats.NEW_USERS,
        stats.SITES,
        stats.TOTAL_GUILDS,
        stats.TOTAL_CUR_GUILDS,
        stats.ERRORS,
        stats.MESSAGES
      );
    }, this.interval);
  }

  async getStat(t: any): Promise<number> {
    switch (t) {
      case "OFFENSES":
        return Number(
          (
            await Managers.SQL.query(
              "SELECT count(*) FROM ep_offenses WHERE time >= ? AND time <= ? ALLOW FILTERING;",
              [new Date().getTime() - this.interval, new Date().getTime()]
            )
          ).first().count
        );
      case "NEW_GUILDS":
        return Number(
          (
            await Managers.SQL.query(
              "SELECT count(*) FROM ep_guilds WHERE joined >= ? AND joined <= ? ALLOW FILTERING;",
              [new Date().getTime() - this.interval, new Date().getTime()]
            )
          ).first().count
        );
      case "NEW_USERS":
        return Number(
          (
            await Managers.SQL.query(
              "SELECT count(*) FROM ep_users WHERE first_seen >= ? AND first_seen <= ? ALLOW FILTERING;",
              [new Date().getTime() - this.interval, new Date().getTime()]
            )
          ).first().count
        );
      case "SITES":
        return Number(
          (
            await Managers.SQL.query(
              "SELECT count(*) FROM ep_sites WHERE first_seen >= ? AND first_seen <= ? ALLOW FILTERING;",
              [new Date().getTime() - this.interval, new Date().getTime()]
            )
          ).first().count
        );
      case "ERRORS":
        return Number(
          (
            await Managers.SQL.query(
              "SELECT count(*) FROM ep_caught_errors WHERE time >= ? AND time <= ? ALLOW FILTERING;",
              [new Date().getTime() - this.interval, new Date().getTime()]
            )
          ).first().count
        );
      case "TOTAL_GUILDS":
        return Number(
          (
            await Managers.SQL.query(
              "SELECT count(*) FROM ep_guilds ALLOW FILTERING;",
              []
            )
          ).first().count
        );
      case "TOTAL_CUR_GUILDS":
        return Managers.DiscordClient.guilds.cache.size;
    }

    return 0;
  }
}
