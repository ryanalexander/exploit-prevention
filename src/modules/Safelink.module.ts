// Safelink module.ts
import { Managers, Module, Utils } from "../lib/libaries";
import { Message } from "discord.js";
import urlRegex from "url-regex";
// @ts-ignore
import nvt from "node-virustotal";
import { ScheduledCheck } from "../managers/CheckScheduleManager";
import fetch from "node-fetch";
import { getGuildMessage, lang } from "../lib/LanguageLib";
module.exports = class extends Module {
  constructor() {
    super("safelink", ["messageCreate"]);
    this.isDebug = Managers.Config.debug;
  }

  async onMessageReceive(message: Message, guild: any) {
    // Do link checking
    let links = message.content.toString().match(urlRegex());
    if (links) {
      for (let i = 0; i < links.length; i++) {
        let link = links[i];
        let link_raw = link;
        link = Utils.generic.extractHostname(link);
        if (this.isDebug) console.log(`Looking up ${link}`);
        /*
        if ((await RedisClient.get(`SAFELINK:${link}:STATUS`)) === "OK") {
          console.log(
            `Redis response is ${await RedisClient.get(
              `SAFELINK:${link}:STATUS`
            )}`
          );
        }

*/

        let hash = nvt.sha256(link);
        let hash_chk = await Managers.SQL.getHash(hash, "URL");
        if (hash_chk) {
          if (hash_chk.isFlagged && !this.isDebug) {
            handleDetect(message, guild, link_raw);
            return;
          }
        }
        Managers.ScheduleManager.scheduleOrSubscribe(<ScheduledCheck>{
          identifier: link_raw,
          checkType: "LINK",
          callbacks: [
            (outcome: boolean) => {
              if (outcome) {
                Managers.SQL.saveHash(hash, true, "URL");
                handleDetect(message, guild, link_raw);
              } else {
                Managers.SQL.saveHash(hash, false, "URL");
              }
            },
          ],
          actionToOnlyCallOnce: async (checkId: number) => {
            if (this.isDebug)
              console.log(
                `Sending https://api.syrus.gg/workers/safelink/?site=${link_raw} for scan`
              );
            try {
              let worker = await (
                await fetch(
                  `https://api.syrus.gg/workers/safelink/?site=${link_raw}`
                )
              ).json();
              let isFlagged =
                worker && worker.checkResults && worker.checkResults > 30;
              /*
              RedisClient.set(
                `SAFELINK:${link}:STATUS`,
                isFlagged ? "BAD" : "OK"
              );

               */
              return { flagged: isFlagged, checkId: checkId };
            } catch (e) {
              Managers.SQL.storeError(
                e,
                "MessageEvent.ts:safelink:scheduledCallback"
              );
              return { flagged: false, checkId: checkId };
            }
          },
        });
      }
    }
    return;
  }
};

var handleDetect = async function (message: Message, guild: any, link: String) {
  Managers.SQL.registerOffense(
    message.channel,
    link,
    message.author,
    new Date().getTime() - message.createdTimestamp
  );
  if (!message.deleted) {
    message.delete().catch(() => {
      // Message already deleted
    });
    if (guild.log_channel && guild.log_channel != 0) {
      let channel = await Managers.DiscordClient.channels.fetch(
        guild.log_channel
      );
      channel.send({
        embeds: [
          getGuildMessage(
            lang.messages.logging.badlink_detected,
            message.guild,
            [
              {
                type: "DISCORD_TARGET_MENTION",
                value: message.author.toString(),
              },
              {
                type: "DISCORD_TARGET_ID",
                value: message.author.id,
              },
              {
                type: "ARG_DELETED_URL",
                value: link,
              },
              {
                type: "DISCORD_CHANNEL_MENTION",
                value: message.channel.toString(),
              },
            ]
          ),
        ],
      });
    }
  }
};
