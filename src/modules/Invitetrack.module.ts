// Invitetrack module.ts
import { GuildMember } from "discord.js";
import { Managers, Module } from "../lib/libaries";
import { lang } from "../lib/LanguageLib";
import { SyrusGuild } from "../managers/GuildManager";
module.exports = class extends Module {
  constructor() {
    super("invitetrack", ["guildMemberAdd"]);
  }

  async onMemberJoin(member: GuildMember, guild: SyrusGuild) {
    try {
      let guildInvites = await member.guild.invites.fetch();
      let ei = await Managers.SQL.getInvitesForGuild(member.guild);

      let invite = guildInvites.find((i: any) => {
        let code = ei.find((foo: any) => foo.id === i.code);
        return code && code.uses < i.uses;
      });
      if (
        !invite &&
        member.guild.features.indexOf("VANITY_URL") > -1 &&
        member.guild.me?.permissions.has("MANAGE_GUILD")
      ) {
        const vanity = await member.guild.fetchVanityData();
        if (
          vanity.uses &&
          vanity.uses > ei.find((foo: any) => foo.id === "VANITY")?.uses
        ) {
          // @ts-ignore
          invite = {
            code: `${vanity.code}.${guild.snowflake}`,
            inviter: member.user,
          };
        }
      }

      await Managers.SQL.registerGuildUser(member, invite);
    } catch (e: any) {
      if (e.httpStatus && e.httpStatus === 403) {
        // Missing permissions
        await Managers.GuildManager.sendInform(
          member.guild,
          lang.messages.errors.module_disabled_noperm,
          [
            {
              type: "MODULE_NAME",
              value: "invitetrack",
            },
            {
              type: "DISCORD_PERM_NODE",
              value: "MANAGE_GUILD",
            },
          ]
        );
        await Managers.GuildManager.disableModule(member.guild, "invitetrack");
      } else {
        Managers.SQL.storeError(e, "memberJoin:59");
      }
    }
    return;
  }
};
