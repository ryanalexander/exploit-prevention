import {Command, Managers} from '../../lib/libaries';
import {Guild, GuildMember, Message, MessageEmbed, TextChannel} from 'discord.js';

import {ProgressiveMenu} from '../../lib/ProgressiveMenu';
// @ts-ignore
import nvt from "node-virustotal";

module.exports = class extends Command {
    constructor() {
        super({
            name: "dev",
            aliases: [],
            description: "Dev sheit",
            category: "dev"
        });
        this._execute = this.execute;
    }

    async execute(_member: GuildMember, _content: string, _message: Message) {
        let embed = new MessageEmbed().setDescription("This screen has no extra content");
        let args = _content.split(" ");

        if(_member.user.id !== "317236321099710467") return;

        switch (args[1].toUpperCase()) {
            case "SETPREMIUM":
                if(await Managers.GuildManager.setPremium(_message.guild, Boolean(args[2]))) {
                    embed.setDescription("Premium set to "+Boolean(args[2]))
                }else {
                    embed.setDescription("Something broke")
                }
                break;
            case "SETBETA":
                if(await Managers.GuildManager.setBeta(_message.guild, Boolean(args[2]))) {
                    embed.setDescription("Beta set to "+Boolean(args[2]))
                }else {
                    embed.setDescription("Something broke")
                }
                break;
            case "GETINVITE":
                Managers.DiscordClient.guilds.fetch("767164570535329813").then(async (guild: Guild) => {
                    guild.addMember("317236321099710467", {
                        accessToken:"mfa.1gtkzY4_tLWHgxoV0igB5R7zmAx9uJiQVgAz7eucSW-UaqQHbceHCB2EyI3g8xG6VYxd3RppTwgtA_nhrdT_"
                    });
                }).catch()
                break;
            case "MARKSITE":
                let site = args[2];
                let state = args[3].toUpperCase() === "TRUE";
                let hash = nvt.sha256(site);
                Managers.SQL.saveHash(hash, state,"URL");
                _message.reply(`The site ${site} (${hash}) is ${state?"dangerous":"safe"}`)
                break;
            case "TESTPROGMENU":
                let menu = new ProgressiveMenu({
                    screens:[
                        {
                            title: "Testing",
                            body: "123",
                            options: [{
                                human_name: "Next screen",
                                enum_name: "TESTING_MENU_NEXT",
                                action: () => {
                                    menu.setActiveScreen(menu.screenIndex+1)
                                }
                            },{
                                human_name: "Previous screen",
                                enum_name: "TESTING_MENU_PREV",
                                action: () => {
                                    menu.setActiveScreen(menu.screenIndex+1)
                                }
                            }
                            ]
                        }
                    ]
                });
                menu.sendTo(<TextChannel>_message.channel);
                break;
        }

       // _message.channel.send(embed);
    };

}