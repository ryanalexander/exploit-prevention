import { Command, Managers } from "../../lib/libaries";
import { GuildMember, Message, MessageEmbed, TextChannel } from "discord.js";

import { ProgressiveMenu } from "../../lib/ProgressiveMenu";
// @ts-ignore
import nvt from "node-virustotal";
import { lang } from "../../lib/LanguageLib";

module.exports = class extends Command {
  constructor() {
    super({
      name: "dev",
      aliases: [],
      description: "Dev sheit",
      category: "dev",
    });
    this._execute = this.execute;
  }

  async execute(_member: GuildMember, _content: string, _message: Message) {
    let embed = new MessageEmbed().setDescription(
      "This screen has no extra content"
    );
    let args = _content.split(" ");

    if (_member.user.id !== "317236321099710467") return;

    switch (args[1].toUpperCase()) {
      case "SETPREMIUM":
        if (
          await Managers.GuildManager.setPremium(
            _message.guild,
            Boolean(args[2])
          )
        ) {
          embed.setDescription("Premium set to " + Boolean(args[2]));
        } else {
          embed.setDescription("Something broke");
        }
        break;
      case "SETPARTNER":
        embed.setTitle("Partner status");
        let partnerPayload = await Managers.GuildManager.setPartner(
          _message.guild,
          args[2],
          _member.user
        );
        if (partnerPayload.success) {
          embed.setColor(lang.colors.success);
          embed.setDescription(
            `This server is now associated with \`${args[2]}\` (${partnerPayload.partner.owner})`
          );
        } else {
          embed.setColor(lang.colors.error);
          embed.setDescription(partnerPayload.error);
        }
        break;
      case "SETBETA":
        if (
          await Managers.GuildManager.setBeta(_message.guild, Boolean(args[2]))
        ) {
          embed.setDescription("Beta set to " + Boolean(args[2]));
        } else {
          embed.setDescription("Something broke");
        }
        break;
      case "MARKSITE":
        let site = args[2];
        let state = args[3].toUpperCase() === "TRUE";
        let hash = nvt.sha256(site);
        Managers.SQL.saveHash(hash, state, "URL");
        _message.reply(
          `The site ${site} (${hash}) is ${state ? "dangerous" : "safe"}`
        );
        break;
      case "TESTPROGMENU":
        let menu = new ProgressiveMenu({
          id: "testprogmenu",
          screens: [
            {
              title: "Testing",
              body: "123",
              options: [
                {
                  human_name: "Next screen",
                  enum_name: "TESTING_MENU_NEXT",
                  action: () => {
                    menu.setActiveScreen(menu.screenIndex + 1);
                  },
                },
                {
                  human_name: "Previous screen",
                  enum_name: "TESTING_MENU_PREV",
                  action: () => {
                    menu.setActiveScreen(menu.screenIndex + 1);
                  },
                },
              ],
            },
          ],
        });
        menu.sendTo(<TextChannel>_message.channel);
        break;
    }

    _message.channel.send({ embeds: [embed] });
  }
};
