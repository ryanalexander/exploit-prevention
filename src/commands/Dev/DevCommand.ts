import {Guild, GuildMember, Message, MessageEmbed} from "discord.js";
// @ts-ignore
import nvt from "node-virustotal";
import { lang } from "../../lib/LanguageLib";
import { Command, Managers } from "../../lib/libaries";
import {SyrusGuild} from "../../managers/GuildManager";

module.exports = class extends Command {
  constructor() {
    super({
      name: "dev",
      aliases: [],
      description: "Dev sheit",
      category: "dev",
      requiredPerms: ["EMBED_LINKS"],
    });
    this._execute = this.execute;
  }

  async execute(_member: GuildMember, _content: string, _message: Message) {
    let embed = new MessageEmbed().setDescription(
      "This screen has no extra content"
    );
    let args = _content.split(" ");

    if (_member.user.id !== "317236321099710467") {
      console.log("Hmm, an unauthorized user ran " + _content);
      return;
    }

    console.log(args[1].toUpperCase());

    switch (args[1].toUpperCase()) {
      case "SETPREMIUM":
        await setPremium(_message, args, embed);
        break;
      case "SETPARTNER":
        await setPartner(_message, args, embed, _member);
        break;
      case "SETBETA":
        await setBeta(_message, args, embed);
        break;
      case "MARKSITE":
        await markSite(_message, args, embed);
        break;
      case "SETSTATUS":
        let message = "";
        for (let i = 2; i < args.length; i++) message += args[i] + " ";
        Managers.DiscordClient.user?.setActivity(message);
        embed.setDescription("Status set to " + message);
        break;
      case "KICKLIST":
        await kickList(_message, args, embed);
        break;
      case "GUILDINFO":
        await guildInfo(_message, args, embed);
        break;
      case "PARTNERSTATS":
        await partnerStats(_message, args, embed);
        break;
    }

    _message.channel.send({ embeds: [embed] });
  }
};
let partnerStats = async (_message: Message, _args: string[], _embed: MessageEmbed)=>{
  let partner = _args[2];
  let partnerGuilds = await Managers.GuildManager.getGuildsByPartner(partner);
  let discordGuilds: Guild[] = [];
  partnerGuilds.forEach((guild: SyrusGuild) => {
    let discordGuild: Guild = Managers.DiscordClient.guilds.cache.get(guild.snowflake)
    if(!discordGuild) {
      console.log("Could not find guild " + guild.snowflake);
      return;
    }
    discordGuilds.push(discordGuild);
  });

  _embed.setTitle(partner + "'s Guilds");
  _embed.setDescription(discordGuilds.map(guild => guild.name).join("\n"));

}
let guildInfo = async (_message: Message, args: string[], embed: MessageEmbed)=>{
  let guild: Guild | undefined = _message.guild ?? undefined;
  let syGuild: SyrusGuild = await Managers.GuildManager.getGuildOrCreate(_message.guild);
  if(args.length > 2) {
    try {
      guild = await Managers.DiscordClient.guilds.fetch(args[2])
    } catch (e) {}
  }
  if (!guild) {
    embed.setDescription("Guild not found");
    return;
  }
  let guildIcon = guild.iconURL() ?? "";
  embed.setThumbnail(guildIcon);
  embed.setTitle(guild.name ?? "Unknown");
  embed.setDescription(
      `${guild.memberCount} members\n${guild.channels.cache.size} channels\n${guild.roles.cache.size} roles`
  );
  embed.addField("Owner", (await guild.fetchOwner()).toString() ?? "None",true);
  embed.addField("Premium", syGuild.premium ? "Yes" : "No",true);
  embed.addField("Prefix", `\`${syGuild.prefix}\``, true);
  embed.addField("First seen", `${syGuild.joined}`);
  embed.addField("Modules", syGuild.modules.join(", "));
  embed.addField("Log channel", syGuild.log_channel?.toString() ?? "None");

  embed.setFooter(
      `ID: ${guild.id}`
  );
}
let kickList = async (_message: Message, args: string[], embed: MessageEmbed)=>{
  let list: string[] = [];
  for (let i = 2; i < args.length; i++) list.push(args[i]);
  if(!_message.guild)
    return;
  if(!_message.guild.me)
    return;
  if(!_message.guild.me.permissions.has("KICK_MEMBERS")) {
    embed.setDescription("I don't have permission to kick members");
    return;
  }
  await _message.guild.members.fetch();
  // @ts-ignore
  let i = 0;
  for (const memberId of list) {
    if(!_message.guild)
      continue;

    let member: any;
    try {
      member =await _message.guild.members.fetch(memberId)
    }catch (e) {
      console.log("Member not found");
    }
    if(!member)
      continue;
    member.kick("Syrus bulk kick").then(() => {
      if(!member) return;
      console.log(`Kicked ${member.user.tag}`);
      i++;
    }).catch((err:any) => {
      console.log(err);
    });
  }
  console.log(`Kicked ${i} members`);
}
let setPremium = async (_message: Message, args: string[], embed: MessageEmbed)=>{
  if (
      await Managers.GuildManager.setPremium(
          _message.guild,
          Boolean(args[2])
      )
  ) {
    embed.setDescription("Premium set to " + Boolean(args[2]));
    Managers.SQL.addAuditEntry(
        "SET_PREMIUM",
        Boolean(args[2]),
        _message.guild,
        _message.author
    );
  } else {
    embed.setDescription("Something broke");
  }
}
let setPartner = async (_message: Message, args: string[], embed: MessageEmbed, _member: GuildMember)=>{
  embed.setTitle("Partner status");
  let partnerPayload = await Managers.GuildManager.setPartner(
      _message.guild,
      args[2],
      _member.user
  );
  if (partnerPayload.success) {
    Managers.SQL.addAuditEntry(
        "SET_PARTNER",
        args[2],
        _message.guild,
        _message.author
    );
    embed.setColor(lang.colors.success);
    embed.setDescription(
        `This server is now associated with \`${args[2]}\` (${partnerPayload.partner.owner})`
    );
  } else {
    embed.setColor(lang.colors.error);
    embed.setDescription(partnerPayload.error);
  }
}
let markSite = async (_message: Message, args: string[], embed: MessageEmbed)=>{
  let site = args[2];
  let state = args[3].toUpperCase() === "TRUE";
  let hash = nvt.sha256(site);
  Managers.SQL.saveHash(hash, state, "URL");
  embed.setTitle("Site marked");
  embed.setDescription(hash)
  embed.addField("Site", site);
  embed.addField("State", state ? "Dangerous" : "Safe");
}
let setBeta = async (_message: Message, args: string[], embed: MessageEmbed)=>{
  if (
      await Managers.GuildManager.setBeta(_message.guild, Boolean(args[2]))
  ) {
    Managers.SQL.addAuditEntry(
        "SET_BETA",
        Boolean(args[2]),
        _message.guild,
        _message.author
    );
    embed.setDescription("Beta set to " + Boolean(args[2]));
  } else {
    embed.setDescription("Something broke");
  }
}
