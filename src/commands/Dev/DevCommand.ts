import { GuildMember, Message, MessageEmbed, TextChannel } from "discord.js";
// @ts-ignore
import nvt from "node-virustotal";
import { lang } from "../../lib/LanguageLib";
import { Command, Managers } from "../../lib/libaries";
import { ProgressiveMenu } from "../../lib/ProgressiveMenu";

module.exports = class extends Command {
  constructor() {
    super({
      name: "dev",
      aliases: [],
      description: "Dev sheit",
      category: "dev",
    });
    this._execute = this.execute;
  }

  async execute(_member: GuildMember, _content: string, _message: Message) {
    let embed = new MessageEmbed().setDescription(
      "This screen has no extra content"
    );
    let args = _content.split(" ");

    if (_member.user.id !== "317236321099710467") {
      console.log("Hmm, an unauthorized user ran " + _content);
      return;
    }

    console.log(args[1].toUpperCase());

    switch (args[1].toUpperCase()) {
      case "SETPREMIUM":
        if (
          await Managers.GuildManager.setPremium(
            _message.guild,
            Boolean(args[2])
          )
        ) {
          embed.setDescription("Premium set to " + Boolean(args[2]));
          Managers.SQL.addAuditEntry(
            "SET_PREMIUM",
            Boolean(args[2]),
            _message.guild,
            _message.author
          );
        } else {
          embed.setDescription("Something broke");
        }
        break;
      case "SETPARTNER":
        embed.setTitle("Partner status");
        let partnerPayload = await Managers.GuildManager.setPartner(
          _message.guild,
          args[2],
          _member.user
        );
        if (partnerPayload.success) {
          Managers.SQL.addAuditEntry(
            "SET_PARTNER",
            args[2],
            _message.guild,
            _message.author
          );
          embed.setColor(lang.colors.success);
          embed.setDescription(
            `This server is now associated with \`${args[2]}\` (${partnerPayload.partner.owner})`
          );
        } else {
          embed.setColor(lang.colors.error);
          embed.setDescription(partnerPayload.error);
        }
        break;
      case "SETBETA":
        if (
          await Managers.GuildManager.setBeta(_message.guild, Boolean(args[2]))
        ) {
          Managers.SQL.addAuditEntry(
            "SET_BETA",
            Boolean(args[2]),
            _message.guild,
            _message.author
          );
          embed.setDescription("Beta set to " + Boolean(args[2]));
        } else {
          embed.setDescription("Something broke");
        }
        break;
      case "MARKSITE":
        let site = args[2];
        let state = args[3].toUpperCase() === "TRUE";
        let hash = nvt.sha256(site);
        Managers.SQL.saveHash(hash, state, "URL");
        _message.reply(
          `The site ${site} (${hash}) is ${state ? "dangerous" : "safe"}`
        );
        break;
      case "INDEXUSERS":
        _message.channel.send("Began indexing");
        let members = await _message.guild?.members.fetch();
        let known_members = (
          await Managers.SQL.query(
            "SELECT user_id FROM ep_guild_users WHERE guild_id = ? ALLOW FILTERING;",
            [_message.guild?.id]
          )
        ).rows;
        let i = 0;
        let i1 = 0;
        if (!members) return;

        _message.channel.send(
          "requires cache entry for " +
            members.filter(
              (member: GuildMember) =>
                known_members.find(
                  (known: any) => known.user_id === member.id
                ) != null
            ).size +
            " members"
        );
        return;
        members?.map(async (member: GuildMember) => {
          setTimeout(() => {
            console.log(`finished ${i1} / ${members?.size} - ${member.id}`);
            Managers.SQL.registerGuildUser(member, {
              code: "ACTIONS.BULKREGISTER",
              inviter: { id: 844868880152526868 },
            });
            i1++;
          }, 10 * (i + 1));
          i++;
        });
        break;
      case "TESTPROGMENU":
        let menu = new ProgressiveMenu({
          id: "testprogmenu",
          screens: [
            {
              title: "Testing",
              body: "123",
              options: [
                {
                  human_name: "Next screen",
                  enum_name: "TESTING_MENU_NEXT",
                  action: () => {
                    menu.setActiveScreen(menu.screenIndex + 1);
                  },
                },
                {
                  human_name: "Previous screen",
                  enum_name: "TESTING_MENU_PREV",
                  action: () => {
                    menu.setActiveScreen(menu.screenIndex + 1);
                  },
                },
              ],
            },
          ],
        });
        menu.sendTo(<TextChannel>_message.channel);
        break;
      case "SETSTATUS":
        let message = "";
        for (let i = 2; i < args.length; i++) message += args[i] + " ";
        Managers.DiscordClient.user?.setActivity(message);
        embed.setDescription("Status set to " + message);
        break;
    }

    _message.channel.send({ embeds: [embed] });
  }
};
