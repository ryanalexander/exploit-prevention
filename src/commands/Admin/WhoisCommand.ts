import { Command, Managers } from "../../lib/libaries";
import { GuildMember, Message, MessageEmbed } from "discord.js";
import { getGuildMessage, lang } from "../../lib/LanguageLib";

module.exports = class extends Command {
  constructor() {
    super({
      name: "whois",
      aliases: ["whois"],
      description: "View information on user",
      category: "admin",
      requiredPerms: ["MANAGE_MEMBERS"],
    });
    this._execute = this.execute;
  }

  async execute(_member: GuildMember, _content: string, _message: Message) {
    let args = _content.split(" ");
    let target;
    let member;

    target = null;

    if (
      _message.mentions.members !== null &&
      _message.mentions.members.first() !== undefined
    ) {
      // @ts-ignore
      target = _message.mentions.members.first().user.id;
    } else if (args !== undefined && !isNaN(Number(args[1]))) {
      target = args[1];
    } else {
      target = this.getSender().member.id;
    }

    console.log(target);

    target = await Managers.DiscordClient.users.fetch(target);
    member = await _member.guild.members.fetch(target);

    let isTracking = this.guild.modules.indexOf("invitetrack") > -1;
    let user = await Managers.SQL.getGuildUser(_member.guild, target);

    let firstSeen = "Unknown";
    if (isTracking) {
      if (user) {
        firstSeen = msToReadableTime(
          new Date().getTime() - new Date(user.first_seen).getTime()
        );
      } else if (member != null && member.joinedTimestamp != null) {
        msToReadableTime(new Date().getTime() - member?.joinedTimestamp);
      } else {
        firstSeen = "Never joined";
      }
    } else if (member != null && member.joinedTimestamp != null) {
      msToReadableTime(new Date().getTime() - member?.joinedTimestamp);
    } else {
      firstSeen = "Never joined";
    }

    await _message.channel.send({
      embeds: [<MessageEmbed>getGuildMessage(lang.messages.whois, this.guild, [
          {
            type: "DISCORD_TARGET_TAG",
            value: `${target.tag}`,
          },
          {
            type: "DISCORD_TARGET_MENTION",
            value: `${target.toString()}`,
          },
          {
            type: "USER_FIRST_SEEN",
            value: firstSeen,
          },
          {
            type: "USER_INVITEE",
            value: member
              ? isTracking
                ? user
                  ? `<@${user.invitee}> (${user.invite})`
                  : "Not tracked"
                : "Tracking disabled"
              : "Not in guild",
          },
        ])],
    });

    function msToReadableTime(t: any) {
      const time = Number(t);
      const second = 1000;
      const minute = second * 60;
      const hour = minute * 60;
      const day = hour * 24;
      const month = day * 28;
      const year = month * 12;

      let years = Math.floor(time / year);
      let months = Math.floor((time / month) % 12);
      let days = Math.floor((time / day) % 28);
      let hours = Math.floor((time / hour) % 24);
      let minutes = Math.floor((time / minute) % 60);
      let seconds = Math.floor((time / second) % 60);

      return (
        (years > 0 ? years + "y " : "") +
        (months > 0 ? months + "mo " : "") +
        (days > 0 ? days + "d " : "") +
        (hours > 0 ? hours + "h " : "") +
        (minutes > 0 ? minutes + "m " : "") +
        seconds +
        "s" +
        " ago"
      );
    }
  }
};
