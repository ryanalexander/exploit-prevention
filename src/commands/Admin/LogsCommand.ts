import { Command, Managers } from "../../lib/libaries";
import { GuildMember, Message, MessageEmbed } from "discord.js";
import { getGuildMessage, lang } from "../../lib/LanguageLib";
import { types } from "cassandra-driver";
import Row = types.Row;

module.exports = class extends Command {
  private actions: string[] = ["INVITE", "INVITED", "JOIN"];

  constructor() {
    super({
      name: "logs",
      aliases: ["logging"],
      description: "Logging utility",
      category: "admin",
      requiredPerms: ["MANAGE_GUILD"],
      requiredModules: ["advancedlogging"],
    });
    this._execute = this.execute;
  }

  async execute(_member: GuildMember, _content: string, _message: Message) {
    if (!_message.guild) return;

    /**
     * ep!logs -a=invite -code=abc -t=1h
     * ep!logs -a=join -t=1h
     */

    let args = _content.split(" ");
    let action = null;
    let timeframe = 0;
    let limit = 10;
    let code = null;
    let ban = false;
    let raw = false;
    let date = new Date().getTime();

    args.forEach((arg) => {
      let parts = arg.split("=");
      parts[0] = parts[0].substr(1, parts[0].length);
      if (parts[0].toUpperCase() === "RAW") raw = true;
      if (parts[0].toUpperCase() === "BAN") raw = true;
      if (parts.length == 1) return;
      switch (parts[0].toUpperCase()) {
        case "A":
        case "ACTION":
          action = parts[1].toUpperCase();
          break;
        case "C":
        case "CODE":
          code = parts[1];
          break;
        case "T":
        case "TIME":
        case "TIMEFRAME":
          timeframe = Number(parts[1]);
          break;
        case "LIMIT":
        case "MAX":
          limit = Number(parts[1]);
          if (limit > 250) limit = 250;
          break;
      }
    });
    // @ts-ignore
    if (
      !_message.guild.me
        ?.permissionsIn(_message.channel.id)
        .has(["ATTACH_FILES"]) &&
      limit > 10
    ) {
      _message.channel.send({
        embeds: [
          <MessageEmbed>(
            getGuildMessage(
              lang.messages.errors.logging.limit_no_perm,
              this.guild,
              []
            )
          ),
        ],
      });
      return;
    }

    if (action === null || this.actions.indexOf(action) < 0) {
      _message.channel.send({
        embeds: [
          <MessageEmbed>(
            getGuildMessage(lang.messages.help.logs, this.guild, [])
          ),
        ],
      });
      return;
    } else {
      if (action === "INVITE") {
        if (code === null)
          _message.channel.send({
            embeds: [
              <MessageEmbed>(
                getGuildMessage(lang.messages.help.logs, this.guild, [])
              ),
            ],
          });
        console.log(`Code is ${code}`);
        console.log(`Time is ${timeframe}`);
        return;
      }
      if (action === "INVITED") {
        if (code === null) {
          _message.channel.send("Missing code");
          return;
        }
        let invite = await Managers.SQL.getByInviteCode(
          code,
          _message.guild,
          limit
        );
        let files: { attachment: any; name: string }[] = [];
        console.log(invite);
        if (!invite.guild) {
          _message.channel.send({
            embeds: [
              <MessageEmbed>(
                getGuildMessage(
                  lang.messages.errors.logging.unknown_invite,
                  this.guild,
                  [
                    {
                      type: "INVITE_CODE",
                      value: code,
                    },
                  ]
                )
              ),
            ],
          });
          return;
        }
        if (Number(invite.guild) !== Number(_message.guild?.id)) {
          _message.channel.send({
            embeds: [
              <MessageEmbed>(
                getGuildMessage(
                  lang.messages.errors.no_cross_guild,
                  this.guild,
                  []
                )
              ),
            ],
          });
          return;
        }
        let embed = <MessageEmbed>(
          getGuildMessage(lang.messages.logging.log_results, this.guild, [
            {
              type: "ARG",
              value: code,
            },
            {
              type: "TIMEFRAME",
              value: timeframe + "",
            },
            { type: "ACTION", value: action },
            {
              type: "PLURAL",
              value: invite.members.length > 1 ? "s" : "",
            },
            { type: "RESULT_COUNT", value: invite.members.length + "" },
            {
              type: "COMPUTE_TIME",
              value: new Date().getTime() - date + "",
            },
          ])
        );
        if (ban) {
          embed.setDescription("Click âœ… to ban all");
        }
        if (invite.members.length > 10 || raw) {
          embed.addField("Members", `See \`members-${date}.txt\` for list`);
          files.push({
            attachment: Buffer.from(
              this.convertResultsetToIds(invite.members),
              "utf-8"
            ),
            name: `members-${date}.txt`,
          });
        } else {
          embed.addField(
            "Members",
            this.convertResultsetToString(invite.members)
          );
        }
        _message.channel.send({ embeds: [embed], files: files });
        return;
      } else {
        _message.channel.send("Unknown action");
      }
    }
  }

  private convertResultsetToIds(results: Row[]) {
    this._results = results;
    let reply = "";
    results.forEach((row: Row) => {
      reply += row.user_id + " ";
    });
    return reply;
  }

  private convertResultsetToString(results: Row[]) {
    this._results = results;
    let reply =
      results.length === 0 ? "This invite has not been used yet!" : "";
    results.forEach((row: Row) => {
      reply += `<@${Number(row.user_id)}> ${
        row.nickname != null ? row.nickname + " " : ""
      }(${Number(row.user_id)})\n`;
    });
    return reply;
  }
};
