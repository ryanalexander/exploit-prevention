import {Command, Managers} from '../../lib/libaries';
import {GuildMember, Message, MessageEmbed} from 'discord.js';
import {getMessage, lang} from "../../lib/LanguageLib";

module.exports = class extends Command {
    constructor() {
        super({
            name: "settings",
            aliases: ["setting", "config", "prefs", "preferences"],
            description: "Settings menu",
            category: "admin"
        });
        this._execute = this.execute;
    }

    async execute(_member: GuildMember, _content: string, _message: Message) {
        let embed: MessageEmbed | String = new MessageEmbed();
        let args = _content.split(" ");

        if(!_member.hasPermission("MANAGE_GUILD") && _member.user.id !== "317236321099710467") {
            _message.channel.send(`${getMessage(lang.messages.errors.permission, [{type:"DISCORD_PERM_NODE",value:"MANAGE_GUILD"}])}`);
            return;
        }

        if(args[1] === undefined) {
            embed = getMessage(lang.messages.settings.menu, [
                {
                    type:"BOT_PREFIX",
                    value:this.guild.prefix
                }
            ]);
        }else {
            switch (args[1].toUpperCase()) {
                case "PREFIX":
                case "SETPREFIX":
                case "CHANGEPREFIX":
                    embed.setTitle("Prefix settings")
                    if(args[2] === undefined || args[2] === null) {
                        embed.setDescription(`Correct usage: ${this._guild.prefix}settings prefix [prefix]`);
                        embed.setFooter("You can always @ me to find current prefix")
                    }else {
                        embed.setDescription(`I will now respond to the prefix \`${args[2]}\``);
                        Managers.GuildManager.setPrefix(_message.guild, args[2]);
                    }
                    break;
                case "MESSAGES":
                    embed.setTitle("Messages settings");
                    if(!this.guild.premium) {
                        embed = getMessage(lang.messages.paywall.not_premium, [
                            {
                                type: "FEATURE_NAME",
                                value: "Custom Messages"
                            }
                        ]);
                    }else {
                        embed.setDescription("This functionallity is coming soon.")
                    }
                    break;
                case "LOG-CHANNEL":
                case "LOGS":
                    embed.setTitle("Logging settings")
                    if(args[2] === undefined || args[2] === null) {
                        embed.setDescription(`Correct usage: Eg. ${this._guild.prefix}settings logs ${_message.channel}`);

                        try {
                            let channel = await Managers.DiscordClient.channels.fetch(this._guild.log_channel);

                            embed.addField("Current channel", channel ? channel : "Not set")
                        }catch (e) {
                            embed.addField("Current channel", "Not set")
                        }
                    }else {
                        if(_message.mentions.channels.first()) {
                            embed.setDescription(`I will now log to ${_message.mentions.channels.first()}`)
                            embed.setFooter("Type 'none' as the channel to disable")
                        }else {
                            embed.setDescription(`I will no longer log crash messages`)
                        }
                        Managers.GuildManager.setLogs(_message.guild, _message.mentions.channels.first());
                    }
                    break;
                case "ACTION":
                    let actions = ["WARN","REPOST","DELETE"];
                    embed.setTitle("Action settings");
                    if(args[2] === undefined || args[2] === null) {
                        embed = getMessage(lang.messages.settings.action.usage, [{
                            type: "BOT_GUILD_CURRENT_ACTION",
                            value: `${actions[this.guild.detect_action]}`
                        }]);
                    }else if(actions.indexOf(args[2].toUpperCase()) <=-1){
                        embed = getMessage(lang.messages.settings.action.usage, []);
                    }else {
                        embed = getMessage(lang.messages.settings.action.set, [
                            {
                                type: "SELECTED_ACTION_DESC",
                                value: lang.generic.actions[args[2].toUpperCase()]
                            }
                        ])
                        Managers.GuildManager.setAction(_message.guild, actions.indexOf(args[2].toUpperCase()));
                    }
                    break;
                case "MODULES":
                    if(args[2] === undefined || args[2] === null) {
                        embed = getMessage(lang.messages.settings.modules.usage, [
                            {
                                type: "BOT_PREFIX",
                                value: this.guild.prefix
                            },
                            {
                                type: "BOT_GUILD_MODULES_ENABLED",
                                value: JSON.stringify((await Managers.GuildManager.getGuildModules(_message.guild)).filter((mod:any) => mod.enabled).map((mod:any) => mod.module_name))
                            },
                            {
                                type: "BOT_GUILD_MODULES_ALL",
                                value: JSON.stringify(Managers.Config.modules.map((mod:any) => mod.name))
                            }
                        ]);
                    }else {
                        switch (args[2].toUpperCase()) {
                            case "ENABLE":
                                break;
                            case "DISABLE":
                                break;
                            default:
                                embed = getMessage(lang.messages.settings.modules.usage_basic, []);
                                break;
                        }
                    }

                    break;
            }
        }
        if(embed instanceof MessageEmbed) {
            _message.channel.send(embed);
        }else {
            _message.channel.send(`${embed}`);
        }
    };

}