import { Command, Managers } from "../../lib/libaries";
import { GuildMember, Message, MessageEmbed } from "discord.js";
import { getGuildMessage, getMessage, lang } from "../../lib/LanguageLib";

module.exports = class extends Command {
  constructor() {
    super({
      name: "settings",
      aliases: ["setting", "config", "prefs", "preferences"],
      description: "Settings menu",
      requiredPerms: ["MANAGE_GUILD"],
      category: "admin",
    });
    this._execute = this.execute;
  }

  async execute(_member: GuildMember, _content: string, _message: Message) {
    let embed: MessageEmbed | string = new MessageEmbed();
    let args = _content.split(" ");

    if (args[1] === undefined) {
      embed = getGuildMessage(lang.messages.settings.menu, this.guild, []);
    } else {
      switch (args[1].toUpperCase()) {
        case "PREFIX":
        case "SETPREFIX":
        case "CHANGEPREFIX":
          if (args[2] === undefined || args[2] === null) {
            embed = getGuildMessage(
              lang.messages.settings.prefix.usage,
              this.guild,
              []
            );
          } else {
            Managers.GuildManager.setPrefix(_message.guild, args[2]);
            this.guild.prefix = args[2];
            Managers.SQL.addAuditEntry(
              "UPDATE_PREFIX",
              this.guild.prefix,
              _message.guild,
              _message.author
            );
            embed = getGuildMessage(
              lang.messages.settings.prefix.success,
              this.guild,
              []
            );
          }
          break;
        case "MESSAGES":
          embed.setTitle("Messages settings");
          if (!this.guild.premium) {
            embed = getMessage(lang.messages.paywall.not_premium, [
              {
                type: "FEATURE_NAME",
                value: "Custom Messages",
              },
            ]);
          } else {
            embed.setDescription("This functionality is coming soon.");
          }
          break;
        case "LOG-CHANNEL":
        case "LOGS":
          if (args[2] === undefined || args[2] === null) {
            embed = getGuildMessage(
              lang.messages.settings.logs.usage,
              this.guild,
              []
            );
          } else {
            Managers.GuildManager.setLogs(
              _message.guild,
              _message.mentions.channels.first()
            );

            this.guild.log_channel = _message.mentions.channels.first()?.id;
            Managers.SQL.addAuditEntry(
              "SET_LOGS",
              this.guild.log_channel,
              _message.guild,
              _message.author
            );
            if (_message.mentions.channels.first()) {
              embed = getGuildMessage(
                lang.messages.settings.logs.success,
                this.guild,
                []
              );
            } else {
              embed = getGuildMessage(
                lang.messages.settings.logs.disabled,
                this.guild,
                []
              );
            }
          }
          break;
        case "ACTION":
          let actions = ["WARN", "REPOST", "DELETE"];
          embed.setTitle("Action settings");
          if (args[2] === undefined || args[2] === null) {
            embed = getMessage(lang.messages.settings.action.usage, [
              {
                type: "BOT_GUILD_CURRENT_ACTION",
                value: `${actions[this.guild.detect_action]}`,
              },
              {
                type: "CUR_ACTN_REPST_BTN",
                value: `${
                  actions[this.guild.detect_action] === actions[0]
                    ? "<:enabled_icon:906648127606505472> "
                    : ""
                }`,
              },
              {
                type: "CUR_ACTN_WARN_BTN",
                value: `${
                  actions[this.guild.detect_action] === actions[1]
                    ? "<:enabled_icon:906648127606505472> "
                    : ""
                }`,
              },
              {
                type: "CUR_ACTN_DEL_BTN",
                value: `${
                  actions[this.guild.detect_action] === actions[2]
                    ? "<:enabled_icon:906648127606505472> "
                    : ""
                }`,
              },
            ]);
          } else if (actions.indexOf(args[2].toUpperCase()) <= -1) {
            embed = getMessage(lang.messages.settings.action.usage, []);
          } else {
            embed = getMessage(lang.messages.settings.action.set, [
              {
                type: "SELECTED_ACTION_DESC",
                value: lang.generic.actions[args[2].toUpperCase()],
              },
            ]);
            Managers.GuildManager.setAction(
              _message.guild,
              actions.indexOf(args[2].toUpperCase())
            );
            Managers.SQL.addAuditEntry(
              "SET_DETECT_ACTION",
              actions.indexOf(args[2].toUpperCase()),
              _message.guild,
              _message.author
            );
          }
          break;
        case "MODULES":
          if (
            args[2] === undefined ||
            (args[2] === null && args[3] === undefined) ||
            args[3] === null ||
            Managers.Config.modules.find(
              (module: any) =>
                module.name.toUpperCase() === args[3].toUpperCase()
            ) === undefined
          ) {
            embed = getMessage(lang.messages.settings.modules.usage, [
              {
                type: "BOT_PREFIX",
                value: this.guild.prefix,
              },
              {
                type: "BOT_GUILD_MODULES_ENABLED",
                value: (
                  await Managers.GuildManager.getGuildModules(_message.guild)
                )
                  .filter((mod: any) => mod.enabled)
                  .map((mod: any) => mod.module_name)
                  .join("\n"),
              },
              {
                type: "BOT_GUILD_MODULES_ALL",
                value: (
                  await Managers.GuildManager.getGuildModules(_message.guild)
                )
                  .filter((mod: any) =>
                    mod.enabled
                      ? true
                      : Managers.Config.modules.find(
                          (module: any) => mod.module_name === module.name
                        ).beta_lock
                  )
                  .map(
                    (mod: any) =>
                      `${
                        mod.enabled
                          ? "<:enabled_icon:906648127606505472>"
                          : "<:disabled_icon:906648127753310248>"
                      } **${mod.module_name}** - ${
                        lang.generic.modules_brief[mod.module_name]
                      }`
                  )
                  .join("\n\n"),
              },
              {
                type: "MODULE_USAGE_TEXT",
                value: lang.messages.settings.modules.usage_text,
              },
            ]);
          } else {
            let mod_config = Managers.Config.modules.find(
              (module: any) =>
                module.name.toUpperCase() === args[3].toUpperCase()
            );
            switch (args[2].toUpperCase()) {
              case "ENABLE":
                if (mod_config.beta_lock && !this.guild.beta) {
                  embed = getMessage(lang.messages.errors.module_beta, [
                    {
                      type: "MODULE_NAME",
                      value: args[3],
                    },
                  ]);
                } else if (
                  mod_config.experimental &&
                  Number(_message.author.id) !== 317236321099710467
                ) {
                  embed = getMessage(lang.messages.errors.module_experimental, [
                    {
                      type: "MODULE_NAME",
                      value: args[3],
                    },
                  ]);
                } else if (
                  mod_config.requiredPermission &&
                  !_message.guild?.me?.permissions.has(
                    mod_config.requiredPermission
                  )
                ) {
                  embed = getMessage(lang.messages.errors.module_noperm, [
                    {
                      type: "MODULE_NAME",
                      value: args[3],
                    },
                    {
                      type: "DISCORD_PERM_NODE",
                      value: mod_config.requiredPermission,
                    },
                  ]);
                } else {
                  Managers.GuildManager.enableModule(
                    _message.guild,
                    args[3].toLowerCase()
                  );
                  Managers.SQL.addAuditEntry(
                    "ENABLE_MODULE",
                    args[3].toLowerCase(),
                    _message.guild,
                    _message.author
                  );
                  embed = getMessage(lang.messages.settings.modules.enabled, [
                    {
                      type: "MODULE_NAME",
                      value: args[3],
                    },
                  ]);
                }
                break;
              case "DISABLE":
                Managers.GuildManager.disableModule(
                  _message.guild,
                  args[3].toLowerCase()
                );
                Managers.SQL.addAuditEntry(
                  "DISABLE_MODULE",
                  args[3].toLowerCase(),
                  _message.guild,
                  _message.author
                );
                embed = getMessage(lang.messages.settings.modules.disabled, [
                  {
                    type: "MODULE_NAME",
                    value: args[3],
                  },
                ]);
                break;
              case "INFO":
              case "DESC":
              case "DESCRIPTION":
                embed = getMessage(lang.messages.settings.modules.info, [
                  {
                    type: "MODULE_NAME",
                    value: args[3],
                  },
                  {
                    type: "MODULE_DESC",
                    value: lang.generic.modules[args[3].toLowerCase()],
                  },
                ]);
                break;
              default:
                embed = getMessage(
                  lang.messages.settings.modules.usage_basic,
                  []
                );
                break;
            }
          }

          break;
      }
    }
    _message.channel.send(
      typeof embed === "string" ? embed : { embeds: [embed] }
    );
  }
};
