import fs from "fs";

export function getFiles(path = "./") {
  const entries = fs.readdirSync(path, { withFileTypes: true });

  // Get files within the current directory and add a path key to the file objects
  const files = entries
    .filter((file) => !file.isDirectory())
    .map((file) => ({ ...file, path: path + "/" + file.name }));

  // Get folders within the current directory
  const folders = entries.filter((folder) => folder.isDirectory());

  /*
          Add the found files within the subdirectory to the files array by calling the
          current export function itself
        */
  for (const folder of folders)
    files.push(...getFiles(`${path}/${folder.name}`));

  return files;
}
export function removeItem<T>(arr: Array<T>, value: T): Array<T> {
  const index = arr.indexOf(value);
  if (index > -1) {
    arr.splice(index, 1);
  }
  return arr;
}

export function extractHostname(url: String) {
  var hostname;
  //find & remove protocol (http, ftp, etc.) and get hostname

  if (url.indexOf("//") > -1) {
    hostname = url.split("/")[2];
  } else {
    hostname = url.split("/")[0];
  }

  //find & remove port number
  hostname = hostname.split(":")[0];
  //find & remove "?"
  hostname = hostname.split("?")[0];

  return hostname;
}

export function extractTimeframe(string: String) {
  let parts = string.split(" ");
  let re =
    /((\d{1,2}mo\s?)?(\d{1,2}w\s?)?(\d{1,2}d\s?)?(\d{1,2}h\s?)?(\d{1,2}m\s?)?(\d{1,2}s\s?)?)|\d{1,2}/g;
  let milliseconds = 0;
  parts.map((part) => {
    let matches = part.match(re);
    if (matches && matches.length > 0) {
      matches.map((match) => {
        if (match.length < 2) return;
        let matchParts = match.split(/(\d{1,2})(mo|w|d|h|m|s)/g);
        let i = 0;
        matchParts.map((part) => {
          i++;
          if (isNaN(Number(part))) return;
          let time = Number(part);
          let unit = matchParts[i];
          let multiplier = 1;
          switch (unit) {
            case "mo":
              multiplier = 60 * 60 * 24 * 30;
              break;
            case "w":
              multiplier = 60 * 60 * 24 * 7;
              break;
            case "d":
              multiplier = 60 * 60 * 24;
              break;
            case "h":
              multiplier = 60 * 60;
              break;
            case "m":
              multiplier = 60;
              break;
            case "s":
              multiplier = 1;
              break;
          }
          milliseconds += Number(time) * multiplier;
        });
      });
    }
  });
  return milliseconds * 1000;
}

export function addLeadingZeros(num: any) {
  var s = "0000" + num;
  return s.substr(s.length - 4);
}

export var files = {
  getFiles: getFiles,
};
export var generic = {
  extractHostname: extractHostname,
  addLeadingZeros: addLeadingZeros,
  removeItem: removeItem,
};
