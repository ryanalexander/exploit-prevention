import fs from "fs";

function getFiles(path = "./") {
  const entries = fs.readdirSync(path, { withFileTypes: true });

  // Get files within the current directory and add a path key to the file objects
  const files = entries
    .filter((file) => !file.isDirectory())
    .map((file) => ({ ...file, path: path + "/" + file.name }));

  // Get folders within the current directory
  const folders = entries.filter((folder) => folder.isDirectory());

  /*
          Add the found files within the subdirectory to the files array by calling the
          current function itself
        */
  for (const folder of folders)
    files.push(...getFiles(`${path}/${folder.name}`));

  return files;
}
function removeItem<T>(arr: Array<T>, value: T): Array<T> {
  const index = arr.indexOf(value);
  if (index > -1) {
    arr.splice(index, 1);
  }
  return arr;
}

function extractHostname(url: String) {
  var hostname;
  //find & remove protocol (http, ftp, etc.) and get hostname

  if (url.indexOf("//") > -1) {
    hostname = url.split("/")[2];
  } else {
    hostname = url.split("/")[0];
  }

  //find & remove port number
  hostname = hostname.split(":")[0];
  //find & remove "?"
  hostname = hostname.split("?")[0];

  return hostname;
}

function addLeadingZeros(num: any) {
  var s = "0000" + num;
  return s.substr(s.length - 4);
}

export var files = {
  getFiles: getFiles,
};
export var generic = {
  extractHostname: extractHostname,
  addLeadingZeros: addLeadingZeros,
  removeItem: removeItem,
};
