import {
  EmbedField,
  Message,
  MessageActionRow,
  MessageButton,
  MessageButtonStyleResolvable,
  MessageEmbed,
  TextChannel,
} from "discord.js";

export type Menu = {
  id: string;
  screens: Screen[];
};
export type Screen = {
  title: string;
  body?: string;
  fields?: EmbedField[];
  options?: Option[];
};
export type Option = {
  human_name: string;
  enum_name?: string;
  style?: MessageButtonStyleResolvable;
  action: () => void;
};

export const ProgressiveMenu = class {
  menu: Menu;
  screen: Screen;
  message: Message | undefined;

  buttonOffset: number = 0;

  constructor(menu: Menu) {
    this.menu = menu;
    this.screen = menu.screens[0];
  }

  private _screenIndex: number = 0;

  get screenIndex(): number {
    return this._screenIndex;
  }

  set screenIndex(value: number) {
    this._screenIndex = value;
  }

  async sendTo(channel: TextChannel) {
    this.message = await channel.send({
      embeds: [new MessageEmbed().setDescription("Building")],
    });
    this.doRenderAction();
    return this.message;
  }

  private doRenderAction() {
    let row = new MessageActionRow();
    this.screen.options?.map((option: Option) => {
      row.addComponents(
        new MessageButton({
          label: option.human_name,
          customId: option.enum_name
            ? option.enum_name
            : this.menu.id + this.buttonOffset,
          style: "PRIMARY",
        })
      );
    });
    if (this.message)
      this.message.edit({
        embeds: [this.buildDiscordEmbed()],
        components: [row],
      });
  }

  setActiveScreen(screen: Screen | number) {
    if (typeof screen === "number") {
      this.screen = this.menu.screens[screen];
      this.screenIndex = screen;
    } else {
      this.screen = screen;
    }
    this.doRenderAction();
  }

  linkMessage(message: Message) {
    this.message = message;
  }

  buildDiscordEmbed(): MessageEmbed {
    return new MessageEmbed()
      .setTitle(this.screen.title)
      .setDescription(<string>this.screen.body);
  }

  /**
   * TODO Submit into MenuManager
   */
  register() {}
};
