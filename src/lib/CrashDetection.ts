/*
 * Crash gif detector
 *
 */
/*
 * Actual code
 */
import fs from "fs";
import http from 'https';
import encode from 'sha1-file';

let i = 0;

module.exports = class {

    private requiresDownload:boolean = false;
    private fileName:string = "";
    private file:string = "";

    private eventListeners:any[] = [];

    constructor(fileName: string) {
        this.requiresDownload = fileName.match(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)/g)!==null
        this.fileName = fileName;

        this.doPreflight().then(this.startCheck);
    }

private async doPreflight() {
        return new Promise<void>(async (res) => {
            if(this.requiresDownload) this.file = (await this.doDownload());
            else this.file = this.fileName;
            res();
        })
    }

    private async startCheck() {
        this.completed({
            isCrash: true,
            file: this.file,
            detections: ['HIGH_FPS', 'RES_CHANGE']
        });
    }

    private completed(response: any) {
        this.eventListeners.forEach(func => {
            func(response);
        })
    }

    public async awaitComplete() {
        return new Promise<boolean>((res)=>{
            this.eventListeners.push(res);
        })
    }

private async doDownload(): Promise<string> {
        i++;
        if(i>9999)i=0;
        return new Promise((res, rej) => {
            var file = fs.createWriteStream(`./downloading-${i}`);
            http.get(this.fileName, function(response:any) {
                response.pipe(file);
                file.on('finish', async function() {
                    let hash = await encode.sync(`./downloading-${i}`);
                    fs.renameSync(`./downloading-${i}`, hash);
                    res(hash);
                });
            }).on('error', function() { // Handle errors
                fs.unlinkSync(`./downloading-${i}`);
                rej(null);
            });
        })
    }
};

