import {MessageEmbed} from "discord.js";

export var lang = require("../../lang.json");

export function getMessage(message: Language.Message, replacements: Language.StringReplacement[]):  MessageEmbed | String {
    switch (message.type) {
        case Language.MessageType.EMBED:
            let embed = new MessageEmbed();
            embed.setTitle(message.title);
            embed.setDescription(Language.replaceArgs(message.body, replacements))
            if(message.footer)
                embed.setFooter(message.footer);
            embed.setColor(lang.colors[`${message.color}`])
            if(message.fields) {
                message.fields.forEach(field => {
                    embed.addField(field.name,Language.replaceArgs(field.value,[]))
                })
            }
            return embed;
        case Language.MessageType.MESSAGE:
            return message.body;
    }
}

export function getMessageRandom(list: Language.Message[]): MessageEmbed | String {
    let random = Math.floor(Math.random() * (list.length))-1;
    let message = list[random];
    return getMessage(message, []);
}

export namespace Language {
    export enum MessageType {
        EMBED = "EMBED",
        MESSAGE = "MESSAGE"
    }
    export interface StringReplacement {
        type: String,
        value: String
    }
    export var internalReplacements:StringReplacement[] = [
        new class implements Language.StringReplacement {
            type: String = "BOT_ACTIONS_REPOST";
            value: String = lang.generic.actions.REPOST;
        },
        new class implements Language.StringReplacement {
            type: String = "BOT_ACTIONS_WARN";
            value: String = lang.generic.actions.WARN;
        },
        new class implements Language.StringReplacement {
            type: String = "BOT_ACTIONS_DELETE";
            value: String = lang.generic.actions.DELETE;
        }
    ];
    export interface Message {
        type: MessageType,
        title: String,
        body: String,
        fields: any[],
        footer: String,
        color: String
    }

    export function replaceArgs(message: String, args: StringReplacement[]) {
        let target = message.toString();
        let matches = target.match(/\({([^)]+)}\)/g);
        args.push(...internalReplacements);
        if(matches) {
            matches.forEach(match => {
                let text = match.replace("({","").replace("})","");
                let replacement = args.find(arg=> arg.type === text);
                if(replacement)
                    target = target.replace(match, `${replacement.value}`);
            })
        }
        return target;
    }
}