import { MessageEmbed } from "discord.js";
import { Managers } from "./libaries";

export var lang = require("../../lang.json");

export function getGuildMessage(
  message: Language.Message,
  guild: any,
  replacements: Language.StringReplacement[],
  extrafields: any[] = []
): MessageEmbed | string {
  return getMessage(
    message,
    [
      ...replacements,
      {
        type: "BOT_PREFIX",
        value: guild.prefix,
      },
      {
        type: "GUILD_NAME",
        value: guild.name,
      },
      {
        type: "GUILD_LOG_CHANNEL",
        value:
          guild.log_channel === null ? "Not set" : `<#${guild.log_channel}>`,
      },
      {
        type: "BOT_CONFIG_PREFIX_DEFAULT",
        value: Managers.Config.bot_prefix,
      },
    ],
    extrafields
  );
}

export function getMessage(
  message: Language.Message,
  replacements: Language.StringReplacement[],
  extrafields: any[] = []
): MessageEmbed | string {
  switch (message.type) {
    case Language.MessageType.EMBED:
      let embed = new MessageEmbed();
      embed.setTitle(Language.replaceArgs(message.title, replacements));
      embed.setDescription(Language.replaceArgs(message.body, replacements));
      if (message.footer)
        embed.setFooter(Language.replaceArgs(message.footer, replacements));
      embed.setColor(lang.colors[`${message.color}`]);
      if (extrafields) {
        extrafields.forEach((field: any) => {
          embed.addField(
            Language.replaceArgs(field.name, replacements),
            Language.replaceArgs(field.value, []),
            field?.inline || false
          );
        });
      }
      if (message.fields) {
        message.fields.forEach((field) => {
          embed.addField(
            Language.replaceArgs(field.name, replacements),
            Language.replaceArgs(field.value, replacements),
            field?.inline || false
          );
        });
      }
      if (message.hasTimestamp) embed.setTimestamp(new Date());
      return embed;
    case Language.MessageType.MESSAGE:
      return `${message.body}`;
  }
}

export function getMessageRandom(
  list: Language.Message[]
): MessageEmbed | string {
  let random = getRandomArbitrary(list.length) - 1;
  let message = list[random];
  console.log(message);
  return getMessage(message, []);

  function getRandomArbitrary(max: any) {
    return Math.floor(Math.random() * (max + 1));
  }
}

export namespace Language {
  export enum MessageType {
    EMBED = "EMBED",
    MESSAGE = "MESSAGE",
  }

  export interface StringReplacement {
    type: String;
    value: String;
  }

  export var internalReplacements: StringReplacement[] = [
    new (class implements Language.StringReplacement {
      type: String = "BOT_ACTIONS_REPOST";
      value: String = lang.generic.actions.REPOST;
    })(),
    new (class implements Language.StringReplacement {
      type: String = "BOT_ACTIONS_WARN";
      value: String = lang.generic.actions.WARN;
    })(),
    new (class implements Language.StringReplacement {
      type: String = "BOT_ACTIONS_DELETE";
      value: String = lang.generic.actions.DELETE;
    })(),
    {
      type: "GLOBAL_TIMESTAMP",
      value: new Date().toString(),
    },
  ];

  export interface Message {
    type: MessageType;
    title: String;
    body: String;
    fields: any[];
    footer: String;
    hasTimestamp?: boolean;
    color: String;
  }

  export function replaceArgs(message: String, args: StringReplacement[]) {
    if (message === undefined) return "";
    let target = message.toString();
    let matches = target.match(/\({([^)]+)}\)/g);
    args.push(...internalReplacements);
    if (matches) {
      matches.forEach((match) => {
        let text = match.replace("({", "").replace("})", "");
        let replacement = args.find((arg) => arg.type === text);
        if (replacement) target = target.replace(match, `${replacement.value}`);
      });
    }
    return target;
  }
}
