var stream = require("stream"),
  JSONStream = require("JSONStream"),
  Deferred = require("deferential"),
  bl = require("bl"),
  spawn = require("child_process").spawn;

module.exports = getInfo;

function getInfo(filePath: string, opts: any, cb: any) {
  var params = [];
  params.push(
    "-show_entries",
    "frame=width,height,pix_fmt",
    "-select_streams",
    "v",
    "-show_streams",
    "-print_format",
    "json",
    filePath
  );

  var d = Deferred();
  var info: any;
  var stderr: any;

  var ffprobe = spawn(opts.path, params);
  ffprobe.once("close", function (code: any) {
    if (!code) {
      d.resolve(info);
    } else {
      var err = stderr.split("\n").filter(Boolean).pop();
      d.reject(new Error(err));
    }
  });

  ffprobe.stderr.pipe(
    bl(function (err: any, data: any) {
      if (err) console.log(err);
      stderr = data.toString();
    })
  );

  ffprobe.stdout.pipe(JSONStream.parse()).once("data", function (data: any) {
    info = data;
  });

  return d.nodeify(cb);
}

exports.async = (filePath: string, opts: any) => {
  return new Promise((res) => {
    var params = [];
    params.push(
      "-show_entries",
      "frame=width,height,pix_fmt",
      "-select_streams",
      "v",
      "-show_streams",
      "-print_format",
      "json",
      filePath
    );

    var d = Deferred();
    var info: any;
    var stderr: any;

    var ffprobe = spawn(opts.path, params);
    ffprobe.once("close", function (code: any) {
      if (!code) {
        d.resolve(info);
      } else {
        var err = stderr.split("\n").filter(Boolean).pop();
        d.reject(new Error(err));
      }
    });

    ffprobe.stderr.pipe(
      bl(function (err: any, data: any) {
        if (err) console.log(err);
        stderr = data.toString();
      })
    );

    ffprobe.stdout.pipe(JSONStream.parse()).once("data", function (data: any) {
      info = data;
    });

    res(info);
  });
};
