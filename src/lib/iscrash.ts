/*
 * Crash gif detector
 *
 */
/*
 * Actual code
 */
import libaries from "./libaries";

const ffprobe = require('./ffprobe'),
    ffprobeStatic = require('ffprobe-static');
const sha1File = require("sha1-file");

const bad = [];

let checkfile = async (file: string) => {
    console.log("Starting check on "+file);
    return new Promise(async (res,rej) => {
        let hash = await sha1File.sync(file);

        if(!libaries.Managers.Config.debug) {
            let lookup = await libaries.Managers.SQL.getHash(hash);
            if(lookup && lookup.isCrash) {
                res({check:"cache", hash:hash})
                return;
            }
        }else {
            console.log(`Started check on ${hash}`);
        }
        ffprobe(file, { path: ffprobeStatic.path }, function (err: any, info: any) {
            let resolution, pix_fmt;
            let isbad = false;
            if (err) {
                onbadfile(file, "Detect Failure");
                console.log(err);
                rej(err)
            }

            resolution = [info.frames[0].width,info.frames[0].height];
            pix_fmt = info.frames[0].pix_fmt;

            let p = info.streams[0].avg_frame_rate.split("/");
            info.streams[0].fps = Number(p[0]) / Number(p[1]);

            if(libaries.Managers.Config.debug) {
                console.log(JSON.stringify(info))
            }

            if(info.streams[0].r_frame_rate !== info.streams[0].avg_frame_rate) {
                if(info.streams[0].fps > 360) {
                    res({check:"fps", hash:hash})
                    isbad = true;
                }
            }

            for(var i = 0; i < info.frames.length && !isbad; i++) {
                if(info.frames[i].width !== resolution[0] || info.frames[i].height !== resolution[1] || info.frames[i].pix_fmt !== pix_fmt) {
                    isbad = true;
                    if(info.frames[i].pix_fmt !== pix_fmt) {
                        res({check:"fcng", hash:hash})
                    }else {
                        res({check:"rccg", hash:hash})
                    }
                }
            }

            /** Too aggressive
            if(info.streams[0].has_b_frames >=2) {
                res("b_frame "+info.streams[0].has_b_frames)
            }
             */

            libaries.Managers.SQL.saveHash(hash, isbad);
            res(false);
        });
    })
    return false;
}

let onbadfile = (file: string, t: string)=>{
    console.log(`It seems that ${file} may be a crash gif [${t}]`)
    bad.push(file);
}

module.exports = checkfile;