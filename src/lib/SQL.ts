import {Client} from 'cassandra-driver';
import {Guild} from 'discord.js';
import {Managers} from './libaries'
import Snowflake from "./Snowflake";

export default class {
    private config: any;
    private _client: Client;
    constructor() {
        this.config = Managers.Config;
        this._client = new Client({
            contactPoints: [this.config.database.host],
            localDataCenter: 'datacenter1',
            keyspace: this.config.database.keyspace,
            credentials: {username: this.config.database.username, password: this.config.database.password},
            encoding: {
                useBigIntAsLong: true,
                useBigIntAsVarint: true
            }
        })
    }

    // Getters
    async getGuild(guild: Guild){
        return (await this._client.execute("SELECT * FROM stelch.ep_guilds WHERE snowflake = ? ALLOW FILTERING;", [guild.id], {prepare:true})).first();
    }

    async getHash(hash: String) {
        return (await this._client.execute("SELECT * FROM stelch.ep_files WHERE hash = ?;", [hash], {prepare: true})).first()
    }

    async getGuildModules(guild: Guild) {
        return (await this._client.execute("SELECT * FROM ep_guild_modules WHERE guild_id = ? ALLOW FILTERING;", [guild.id], {prepare: true})).rows;
    }

    async registerModules(guild: Guild, modules:[]) {
        let queries: (string | { query: string; params?: any[] | { [key: string]: any; } | undefined; })[] = [];
        modules.forEach(({enabled, name}) =>
            queries.push({query:"INSERT INTO ep_guild_modules (id, enabled, guild_id, module_name) VALUES (?, ?, ?, ?)", params:[Snowflake(), enabled, guild.id, name]})
        );
        return (await this._client.batch(queries, {prepare: true}))
    }

    // Setters
    async registerGuild(guild: Guild) {
        return (await this._client.execute("INSERT INTO stelch.ep_guilds (snowflake, detect_action, log_channel, prefix, premium, joined, trial_notices) VALUES (?, ?, ?, ?, false, ?, 0)", [guild.id, 0, null, 'ep!', (new Date()).getTime()], {prepare: true}));
    }

    async setPremium(guild: Guild, premium: Boolean) {
        return (await this._client.execute("UPDATE stelch.ep_guilds SET premium = ? WHERE snowflake = ?", [premium, guild.id], {prepare: true}));
    }

    async getModule(guild: Guild, module: String) {
        return (await this._client.execute("SELECT * FROM ep_guild_modules WHERE guild_id = ? AND module_name = ? ALLOW FILTERING", [guild.id, module], {prepare: true})).first();
    }
    async setModule(guild: Guild, module: String, state: Boolean) {
        let mod = await this.getModule(guild, module);
        return (await this._client.execute("UPDATE ep_guild_modules SET enabled = ? WHERE id = ?", [state, mod.id], {prepare: true}));
    }

    async saveHash(hash: String, result: boolean) {
        return (await this._client.execute("INSERT INTO stelch.ep_files (hash, \"isCrash\") VALUES (?, ?)", [hash, result], {prepare: true}))
    }

    async setPrefix(guild: Guild, prefix: String) {
        return (await this._client.execute("UPDATE stelch.ep_guilds SET prefix = ? WHERE snowflake = ?", [prefix, guild.id], {prepare: true}))
    }
    async setLogs(guild: Guild, channel: Number) {
        return (await this._client.execute("UPDATE stelch.ep_guilds SET log_channel = ? WHERE snowflake = ?", [channel, guild.id], {prepare: true}))
    }
    async setAction(guild: Guild, action: Number) {
        return (await this._client.execute("UPDATE stelch.ep_guilds SET detect_action = ? WHERE snowflake = ?", [action, guild.id], {prepare: true}))
    }
    async query(query:string, params:any[]) {
        return (await this._client.execute(query, params, {prepare: true}));
    }

    async getClient() {
        return this._client;
    }
}