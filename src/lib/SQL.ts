import {Client} from 'cassandra-driver';
import {Guild} from 'discord.js';
import {Managers} from './libaries'

export default class {
    private config: any;
    private _client: Client;
    constructor() {
        this.config = Managers.Config;
        this._client = new Client({
            contactPoints: [this.config.database.host],
            localDataCenter: 'datacenter1',
            keyspace: this.config.database.keyspace,
            credentials: {username: this.config.database.username, password: this.config.database.password},
            encoding: {
                useBigIntAsLong: true,
                useBigIntAsVarint: true
            }
        })
    }

    // Getters
    async getGuild(guild: Guild){
        return (await this._client.execute("SELECT * FROM stelch.ep_guilds WHERE snowflake = ? ALLOW FILTERING;", [guild.id], {prepare:true})).first();
    }

    async getHash(hash: String) {
        return (await this._client.execute("SELECT * FROM stelch.ep_files WHERE hash = ?;", [hash], {prepare: true})).first()
    }

    // Setters
    async registerGuild(guild: Guild) {
        return (await this._client.execute("INSERT INTO stelch.ep_guilds (snowflake, detect_action, log_channel, prefix) VALUES (?, ?, ?, ?)", [guild.id, 0, null, 'ep!'], {prepare: true}));
    }

    async saveHash(hash: String, result: boolean) {
        return (await this._client.execute("INSERT INTO stelch.ep_files (hash, \"isCrash\") VALUES (?, ?)", [hash, result], {prepare: true}))
    }

    async setPrefix(guild: Guild, prefix: String) {
        return (await this._client.execute("UPDATE stelch.ep_guilds SET prefix = ? WHERE snowflake = ?", [prefix, guild.id], {prepare: true}))
    }
    async setLogs(guild: Guild, channel: Number) {
        return (await this._client.execute("UPDATE stelch.ep_guilds SET log_channel = ? WHERE snowflake = ?", [channel, guild.id], {prepare: true}))
    }
    async setAction(guild: Guild, action: Number) {
        return (await this._client.execute("UPDATE stelch.ep_guilds SET detect_action = ? WHERE snowflake = ?", [action, guild.id], {prepare: true}))
    }
    async query(query:string, params:any[]) {
        return (await this._client.execute(query, params, {prepare: true}));
    }
}