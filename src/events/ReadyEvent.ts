import { Guild } from "discord.js";
import fetch from "node-fetch";
import { Event, Managers } from "../lib/libaries";

module.exports = class extends Event {
  constructor() {
    super({
      event: "ready",
    });
    this._execute = this.execute;
  }

  execute() {
    [
      `\u001b[38;5;10mSuccessfully started ${Managers.DiscordClient.user.tag} \u001b[0m`,
    ].forEach((line) => {
      console.log(line);
    });

    /*
    Managers.DiscordClient.guilds
      .fetch("537887361292304385")
      .then(async (guild: Guild) => {
        let members = await guild.members.fetch();
        if (guild.me?.permissions.has("BAN_MEMBERS"))
          console.log("I can do the banning");
        members.map((member: GuildMember) => {
          if (member.user.username.toLowerCase().indexOf("faceit ") > -1)
            member.ban({
              reason: "Bot account",
            });
        });
      });

     */

    Managers.DiscordClient.guilds.cache.forEach((guild: Guild) => {
      Managers.GuildManager.getGuildModules(guild).then((modules: any) => {
        if (
          modules.find((module: any) => module.module_name === "invitetrack")
            .enabled
        )
          Managers.GuildManager.syncInvites(guild);
      });
    });

    if (!Managers.Config.isDev) {
      var informStatus = async () => {
        try {
          await fetch(
              "https://heartbeat.uptimerobot.com/m788307139-9772d3c7940851bcd1a9ded47f18b37fa8b69aeb"
          );
          let botsggParams = new URLSearchParams();
          let dblParams = new URLSearchParams();
          let topggParams = new URLSearchParams();
          botsggParams.append(
              "guildCount",
              Managers.DiscordClient.guilds.cache.size + ""
          );
          dblParams.append(
              "guilds",
              Managers.DiscordClient.guilds.cache.size + ""
          );
          dblParams.append("users", Managers.DiscordClient.users.cache.size + "");

          topggParams.append(
              "server_count",
              Managers.DiscordClient.guilds.cache.size
          );

          // @ts-ignore
          await fetch(
              "https://discord.bots.gg/api/v1/bots/844868880152526868/stats",
              {
                method: "POST",
                body: botsggParams,
                headers: {
                  Authorization:
                      "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcGkiOnRydWUsImlkIjoiMzE3MjM2MzIxMDk5NzEwNDY3IiwiaWF0IjoxNjIzODUyMDUyfQ.wLZNF7MsAm3AHMTE9aoi7chFvPRl_oA4pSVCX2ntT8I",
                },
              }
          );
          await fetch(
              "https://discordbotlist.com/api/v1/bots/exploit-prevention/stats",
              {
                method: "POST",
                body: dblParams,
                headers: {
                  Authorization:
                      "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0IjoxLCJpZCI6IjgyMTcwMTgyMzYxNzgyNjg1NiIsImlhdCI6MTYyMzg1Mjc3OH0.A3Wx_Y6ouW0rKLHgg7-KUaKoAglURMYFZQGPOmUzSzk",
                },
              }
          );
          await fetch("https://top.gg/api/bots/844868880152526868/stats", {
            method: "POST",
            body: topggParams,
            headers: {
              Authorization:
                  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Ijg0NDg2ODg4MDE1MjUyNjg2OCIsImJvdCI6dHJ1ZSwiaWF0IjoxNjI1NDczNzcyfQ.Pm9Xb2JcraWjk5DSmUxjHeeuusXH9DQuKYoLV7rweow",
            },
          });
        }catch (e) {
          console.log(e);
        }
      };
      informStatus();
      setInterval(informStatus, 60 * 1000);
    }
  }
};
