import { Event, Managers } from "../../lib/libaries";
import { GuildMember } from "discord.js";
import { lang } from "../../lib/LanguageLib";

module.exports = class extends Event {
  constructor() {
    super({
      event: "guildMemberAdd",
    });
    this._execute = this.execute;
  }

  async execute(member: GuildMember) {
    let guild = await Managers.GuildManager.getGuildOrCreate(member.guild);
    Managers.SQL.registerUser(member.user, member.guild);
    if (guild.modules.indexOf("invitetrack") <= -1) return;
    try {
      let guildInvites = member.guild.invites.cache;
      let ei = await Managers.SQL.getInvitesForGuild(member.guild);

      // @ts-ignore
      let invite = guildInvites.find(
        (i: any) =>
          ei.find((foo: any) => foo.id === i.code) !== undefined &&
          ei.find((foo: any) => foo.id === i.code).uses < i.uses
      );
      if (!invite && member.guild.features.indexOf("VANITY_URL") > -1) {
        const vanity = await member.guild.fetchVanityData();
        if (
          vanity.uses &&
          vanity.uses > ei.find((foo: any) => foo.id === "VANITY").uses
        ) {
          // @ts-ignore
          invite = {
            code: member.guild.id + "",
            inviter: null,
          };
        }
      }

      await Managers.SQL.registerGuildUser(member, invite);
    } catch (e: any) {
      if (e.httpStatus && e.httpStatus === 403) {
        // Missing permissions
        await Managers.GuildManager.sendInform(
          member.guild,
          lang.messages.errors.module_disabled_noperm,
          [
            {
              type: "MODULE_NAME",
              value: "invitetrack",
            },
            {
              type: "DISCORD_PERM_NODE",
              value: "MANAGE_GUILD",
            },
          ]
        );
        await Managers.GuildManager.disableModule(member.guild, "invitetrack");
      } else {
        console.log(e);
      }
    }
  }
};
