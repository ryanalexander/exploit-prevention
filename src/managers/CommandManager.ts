import {Utils} from '../lib/libaries';
import {Message, PermissionResolvable} from 'discord.js';
import {getGuildMessage, lang} from "../lib/LanguageLib";

module.exports = class {
    private _commandDir: string;
    private _commands: any[] = [];

    constructor(commandDir: string) {
        this._commandDir = commandDir;
        this._commands = [];

        Utils.files.getFiles(this._commandDir).forEach((file:any) => {
            if(file.path.endsWith(".map"))return;
            this.loadCommand(file.path);
        })
    }

    private loadCommand(command: string):void {
        let e = new (require("../"+command));
        this._commands.push(e);
        console.log(`Command> Loaded command ${e._name} with 0 aliases - ${command}`);
    }

    public handle(message: Message, guild: any) {
        let commandName = message.content.split(" ")[0];
        commandName = commandName.substr(guild.prefix.length,commandName.length);
        let commandModule = this._commands.find(command => command._name == commandName);
        if(commandModule._requiredPerms.length > 0 && message.author.id !== "317236321099710467") {
            let failed = false;
            let missing_perms:any[] = [];
            commandModule._requiredPerms.forEach((permission:PermissionResolvable) => {
                if(!message.member?.permissionsIn(message.channel).has(permission)) {
                    failed = true;
                    missing_perms.push(permission);
                }
            })
            if(failed) {
                message.channel.send(getGuildMessage(lang.messages.errors.permission, guild, [{type:"DISCORD_PERM_NODE",value:missing_perms.join(", ")},{type:"COMMAND_NAME",value:commandName}]))
                return;
            }
        }
        if(commandModule._requiredModules.length > 0) {
            let failed = false;
            let missing_modules:any[] = [];
            commandModule._requiredModules.forEach((module:string) => {
                if(guild.modules.indexOf(module) < 0) {
                    failed = true;
                    missing_modules.push(module);
                }
            })
            if(failed) {
                message.channel.send(getGuildMessage(lang.messages.errors.module_disabled, guild, [{type:"MODULE_NAME",value:missing_modules.join(", ")}]))
                return;
            }
        }

        if(commandModule)
            commandModule.handle(message, guild);
    }

    get commandDir(): string {
        return this._commandDir;
    }
}