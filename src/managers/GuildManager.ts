import {Managers, Config} from '../lib/libaries';
import {Guild, MessageEmbed, TextChannel} from "discord.js";

module.exports =class {
    constructor() {
    }

    async getGuildOrCreate(guild: Guild): Promise<{ snowflake: Number, log_channel: Number, prefix: string }> {
        let g = await Managers.SQL.getGuild(guild);
        if(!g) {
            await Managers.SQL.registerGuild(guild);
        }else {
            return g;
        }
        return await this.getGuildOrCreate(guild);
    }

    async getGuildModules(guild: Guild): Promise<[{ module_name: String, enabled: Boolean }]> {
        let modules = await Managers.SQL.getGuildModules(guild);
        let missing: string[] = [];
        let module_list: string[] = [];
        modules.forEach((module:any) => module_list.push(module.module_name));
        missing = Config.modules.filter( ( el:any ) => !module_list.includes( el.name ) );
        console.log(missing);
        // Insert missing entries into database
        return modules;
    }

    async syncInvites(guild: Guild) {
        if(!guild.me?.hasPermission("MANAGE_GUILD"))return;
        let invites = await guild.fetchInvites();
        let queries: { query: string; params: (string | number | null | undefined)[]; }[] = [];
        invites.forEach(invite => {
            if(invite.guild)
                queries.push({query:"INSERT INTO ep_guild_invites (id, creator, guild, uses) VALUES (?, ?, ?, ?)", params: [invite.code, invite.inviter?.id,invite.guild.id, invite.uses]})
        })
        Managers.SQL.getClient().batch(queries, {prepare: true});
    }

    async setPrefix(guild: Guild, prefix: String) {
        await Managers.SQL.setPrefix(guild, prefix);
    }

    async setLogs(guild: Guild, channel: TextChannel | undefined) {
        if(channel!=undefined)
            channel.send(new MessageEmbed().addField("Logs channel set","I will now post all detection logs into this channel."))
        await Managers.SQL.setLogs(guild, channel != undefined ? Number(channel.id) : 0);
    }

    async setAction(guild: Guild, action: Number) {
        await Managers.SQL.setAction(guild, action);
    }
}