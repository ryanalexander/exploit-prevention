import {Managers, Config} from '../lib/libaries';
import {Guild, MessageEmbed, TextChannel} from "discord.js";
import {getMessage, lang} from "../lib/LanguageLib";
import {types} from "cassandra-driver";
import Integer = types.Integer;

module.exports =class {
    constructor() {
    }

    async getGuildOrCreate(guild: Guild): Promise<{ snowflake: Number, log_channel: Number, prefix: string, premium: boolean, trial_noticed: Integer }> {
        let g = await Managers.SQL.getGuild(guild);
        if(!g) {
            await Managers.SQL.registerGuild(guild);
        }else {
            g.modules = (await this.getGuildModules(guild)).filter(mod => mod.enabled).map(mod => mod.module_name);
            return g;
        }
        return await this.getGuildOrCreate(guild);
    }

    async doPremiumCheck(guild: Guild, g: any) {
        if(g.premium)return true;
        if(guild.memberCount >= Managers.Config.premium_settings.max_members) {
            if(Math.round(((Managers.Config.premium_settings.max_age - (new Date().getTime() - new Date(g.joined).getTime())) / 8.64e+7)) < 1) {
                if(g.trial_notices > Managers.Config.premium_settings.max_notices) {
                    let embed = getMessage(lang.messages.paywall.large_guild_trial_expired, []);
                    if(embed instanceof MessageEmbed)
                        guild.publicUpdatesChannel?.send(embed);
                    Managers.GuildManager.disableModule(guild, "crashdetect");
                    return false;
                }else {
                    let embed = getMessage(lang.messages.paywall.large_guild_finalnotice_trial, [
                        {
                            type: "TRIAL_DETECTIONS_REMAINING",
                            value: Managers.Config.premium_settings.max_notices - g.trial_notices + ""
                        }
                    ]);
                    if(embed instanceof MessageEmbed)
                        guild.publicUpdatesChannel?.send(embed);
                    Managers.SQL.query("UPDATE ep_guilds SET trial_notices = ? WHERE snowflake = ?", [g.trial_notices+1, guild.id], {prepare: true});
                }
            }else {
                let embed = getMessage(lang.messages.paywall.large_guild_trial, [
                    {
                        type: "TRIAL_DAYS_REMAINING",
                        value: Math.round(((Managers.Config.premium_settings.max_age - (new Date().getTime() - new Date(g.joined).getTime())) / 8.64e+7))+""
                    }
                ]);
                if(embed instanceof MessageEmbed)
                    guild.publicUpdatesChannel?.send(embed);
            }
        }
        return true;
    }

    async disableModule(guild: Guild, module: String) {
        return (await Managers.SQL.setModule(guild, module, false));
    }

    async getGuildModules(guild: Guild): Promise<[{ module_name: String, enabled: Boolean }]> {
        let modules = await Managers.SQL.getGuildModules(guild);
        let missing: any[] = [];
        let module_list: string[] = [];
        modules.forEach((module:any) => module_list.push(module.module_name));
        missing = Config.modules.filter( ( el:any ) => !module_list.includes( el.name ) );
        if(missing.length > 0) {
            await Managers.SQL.registerModules(guild, missing);
            return this.getGuildModules(guild);
        }
        return modules;
    }

    async syncInvites(guild: Guild) {
        if(!guild.me?.hasPermission("MANAGE_GUILD"))return;
        if(Managers.Config.debug) {
            console.log("Invite tracking enabled for "+guild.id);
        }
        let invites = await guild.fetchInvites();
        let queries: { query: string; params: (string | number | null | undefined)[]; }[] = [];
        invites.forEach(invite => {
            if(invite.guild)
                queries.push({query:"INSERT INTO ep_guild_invites (id, creator, guild, uses) VALUES (?, ?, ?, ?)", params: [invite.code, invite.inviter?.id,invite.guild.id, invite.uses]})
        })
        Managers.SQL._client.batch(queries, {prepare: true});
    }

    async setPremium(guild: Guild, premium: Boolean) {
        return await Managers.SQL.setPremium(guild, premium);
    }

    async setPrefix(guild: Guild, prefix: String) {
        await Managers.SQL.setPrefix(guild, prefix);
    }

    async setLogs(guild: Guild, channel: TextChannel | undefined) {
        if(channel!=undefined)
            channel.send(new MessageEmbed().addField("Logs channel set","I will now post all detection logs into this channel."))
        await Managers.SQL.setLogs(guild, channel != undefined ? Number(channel.id) : 0);
    }

    async setAction(guild: Guild, action: Number) {
        await Managers.SQL.setAction(guild, action);
    }
}