export enum checkType {
  LINK,
  VIDEO,
}

export type ScheduledCheck = {
  identifier: string;
  checkType: checkType;
  onlycallifoutcomeis?: boolean;
  callbacks: ((outcome: boolean) => void)[];
  actionToOnlyCallOnce: () => Promise<boolean>;
};

module.exports = class {
  private _scheduledChecks: any[] = [];

  constructor() {}

  scheduleOrSubscribe(check: ScheduledCheck) {
    let checkId = this._scheduledChecks.findIndex(
      (scheduled) =>
        scheduled.check.identifier === check.identifier &&
        scheduled.check.checkType === check.checkType
    );
    if (checkId > -1) {
      this._scheduledChecks[checkId].callbacks.push(...check.callbacks);
    } else {
      this._scheduledChecks[checkId].push(check);
      check.actionToOnlyCallOnce().then((outcome: boolean) => {
        if (check.onlycallifoutcomeis && check.onlycallifoutcomeis === outcome)
          this._scheduledChecks[checkId].callbacks.map((callback: any) =>
            callback(outcome)
          );
      });
    }
  }
};
