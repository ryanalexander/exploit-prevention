export var checkType: "LINK" | "VIDEO" | undefined;

export type ScheduledCheck = {
  identifier: string;
  checkType: string;
  onlycallifoutcomeis?: boolean;
  callbacks: ((outcome: boolean) => void)[];
  actionToOnlyCallOnce: (
    checkId: number
  ) => Promise<{ flagged: boolean; checkId: number }>;
};

module.exports = class {
  private _scheduledChecks: any[] = [];

  constructor() {}

  scheduleOrSubscribe(check: ScheduledCheck) {
    if (!check.identifier) {
      console.log("Missing identifier! Exiting");
      return;
    }

    let hasExistingCheck = this._scheduledChecks.find((scheduled) => {
      return scheduled.identifier === check.identifier;
    });

    if (hasExistingCheck) {
      hasExistingCheck.callbacks.push(...check.callbacks);
    } else {
      let identifier = this._scheduledChecks.push(check) - 1;
      check.actionToOnlyCallOnce(identifier).then(({ flagged, checkId }) => {
        if (this._scheduledChecks[checkId])
          this._scheduledChecks[checkId].callbacks.map((callback: any) => {
            try {
              callback(flagged);
            } catch (e) {}
          });
        this._scheduledChecks = this._scheduledChecks.splice(checkId + 1, 1);
      });
    }
  }
};
